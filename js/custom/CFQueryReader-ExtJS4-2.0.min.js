Ext.define("ColdFusion.data.reader.CFQueryReader",{extend:"Ext.data.reader.Array",alternateClassName:"ColdFusion.data.CFQueryReader",alias:"reader.cfquery",query:"QUERY",totalProperty:"TOTALROWCOUNT",readRecords:function(a){var b,c;var d=this.model.prototype.fields.items;if(a.metaData){this.onMetaChange(a.metaData)}if(a[this.query]!==undefined){b=a[this.query]}else{b=a;this.query=""}totalProperty=a[this.totalProperty]!==undefined?this.totalProperty:"";try{if(Ext.isObject(b)){if(b.DATA!==undefined&&Ext.isArray(b.DATA)&&b.COLUMNS!==undefined&&Ext.isArray(b.COLUMNS)){this.root=(this.query.length>0?this.query+".":"")+"DATA";for(var e=0;e<=b.COLUMNS;e++){b.COLUMNS[e]=b.COLUMNS[e].toUpperCase()}for(var e=0;e<d.length;e++){var f=b.COLUMNS.indexOf(d[e].name.toUpperCase());if(f>=0){d[e].mapping=b.COLUMNS.indexOf(d[e].name.toUpperCase())}}}else{throw"The 'query' is not properly mapped to the response."}}else{throw"A 'query' is not defined in the server output."}}catch(g){c=new Ext.data.ResultSet({total:0,count:0,records:[],success:false,message:g});this.fireEvent("exception",this,response,c);Ext.Logger.warn(g);return c}this.jsonData=a;return this.callParent([a])}})